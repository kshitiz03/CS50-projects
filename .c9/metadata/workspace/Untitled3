{"changed":true,"filter":false,"title":"Untitled3","tooltip":"/Untitled3","value":"/* global google */\n/* global _ */\n/**\n * scripts.js\n *\n * Computer Science 50\n * Problem Set 8\n *\n * Global JavaScript.\n */\n\n// Google Map\nvar map;\n\n// markers for map\nvar markers = [];\n\n// info window\nvar info = new google.maps.InfoWindow();\n\nvar myposition = 0;\n\n// execute when the DOM is fully loaded\n$(function() {\n\n    // styles for map\n    // https://developers.google.com/maps/documentation/javascript/styling\n    var styles = [\n\n        // hide Google's labels\n        {\n            featureType: \"all\",\n            elementType: \"labels\",\n            stylers: [\n                {visibility: \"off\"}\n            ]\n        },\n\n        // hide roads\n        {\n            featureType: \"road\",\n            elementType: \"geometry\",\n            stylers: [\n                {visibility: \"off\"}\n            ]\n        }\n\n    ];\n\n    // options for map\n    // https://developers.google.com/maps/documentation/javascript/reference#MapOptions\n    var options = {\n        center: {lat: 37.4236, lng: -122.1619}, // Stanford, California\n        disableDefaultUI: true,\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        maxZoom: 14,\n        panControl: true,\n        styles: styles,\n        zoom: 13,\n        zoomControl: true\n    };\n\n    // get DOM node in which map will be instantiated\n    var canvas = $(\"#map-canvas\").get(0);\n\n    // instantiate map\n    map = new google.maps.Map(canvas, options);\n\n    // configure UI once Google Map is idle (i.e., loaded)\n    google.maps.event.addListenerOnce(map, \"idle\", configure);\n\n});\n\n\nfunction go_to_me()\n{\n    if (navigator.geolocation)\n    {\n        navigator.geolocation.getCurrentPosition(function(position)\n        {\n            var mycurrentLat = position.coords.latitude;\n            var mycurrentLong = position.coords.longitude;\n            myposition = new google.maps.LatLng(mycurrentLat, mycurrentLong);\n            map.setCenter(myposition);\n        });\n    }\n}\n\n\n/**\n * Adds marker for place to map.\n */\nfunction addMarker(place)\n{\n    // TODO\n    var lat = place[\"latitude\"];\n    var lon = place[\"longitude\"];\n    var markerLatLong = new google.maps.LatLng(lat, lon);\n    var label = place[\"place_name\"] + \", \" + place[\"admin_name1\"];\n    var icon = \"img/icon.png\";\n\n    var listItems = [];\n\n    marker = new MarkerWithLabel({\n        position: markerLatLong,\n        icon: icon,\n        map: map,\n        draggable: false,\n        labelContent: label,\n        labelAnchor: new google.maps.Point(-18, 24),\n        labelInBackground: false\n    });\n\n    markers.push(marker);\n\n    var parameter = \"geo=\"+ place[\"postal_code\"];\n\n    // Create an info window\n    marker.info = new google.maps.InfoWindow({\n        // Set up the ajax loader gif\n        content: \"<div id='articles'><img id='loader' src='img/ajax-loader.gif' /></div>\"\n    });\n\n    // Add a click listener that will load the articles using ajax.\n    google.maps.event.addListener(marker, \"click\", function (e){ \n        \n        marker.info.open(map, this);\n        // Technique adapted from Baer at this link: http://stackoverflow.com/questions/9760328/clearest-way-to-build-html-elements-in-jquery\n        var html = [\"<ul>\"];\n        // Modify the html and load-in the articles\n        $.getJSON(\"articles.php\", parameter).done(function(data){\n            $.each(data, function(i, item){\n                html.push(\"<li><a href='\"+item.link+\"' target='_blank'>\"+item.title+\"</a></li>\");\n            });\n            html.push(\"</ul>\");\n            marker.info.setContent(html.join(\"\\n\"));\n        }).fail(function(jqXHR, textStatus, errorThrown){\n            console.log(errorThrown.toString());\n        });\n    });\n}\n\n/**\n * Configures application.\n */\nfunction configure()\n{\n    // update UI after map has been dragged\n    google.maps.event.addListener(map, \"dragend\", function() {\n        update();\n    });\n\n    // update UI after zoom level changes\n    google.maps.event.addListener(map, \"zoom_changed\", function() {\n        update();\n    });\n\n    // remove markers whilst dragging\n    google.maps.event.addListener(map, \"dragstart\", function() {\n        removeMarkers();\n    });\n\n    // configure typeahead\n    // https://github.com/twitter/typeahead.js/blob/master/doc/jquery_typeahead.md\n    $(\"#q\").typeahead({\n        autoselect: true,\n        highlight: true,\n        minLength: 1\n    },\n    {\n        source: search,\n        templates: {\n            empty: \"no places found yet\",\n            suggestion: _.template(\"<p><%-place_name %>, <%-admin_name1 %> <%-postal_code %></p>\")\n        }\n    });\n\n    // re-center map after place is selected from drop-down\n    $(\"#q\").on(\"typeahead:selected\", function(eventObject, suggestion, name) {\n\n        // ensure coordinates are numbers\n        var latitude = (_.isNumber(suggestion.latitude)) ? suggestion.latitude : parseFloat(suggestion.latitude);\n        var longitude = (_.isNumber(suggestion.longitude)) ? suggestion.longitude : parseFloat(suggestion.longitude);\n\n        // set map's center\n        map.setCenter({lat: latitude, lng: longitude});\n\n        // update UI\n        update();\n    });\n\n    // hide info window when text box has focus\n    $(\"#q\").focus(function(eventData) {\n        hideInfo();\n    });\n\n    // re-enable ctrl- and right-clicking (and thus Inspect Element) on Google Map\n    // https://chrome.google.com/webstore/detail/allow-right-click/hompjdfbfmmmgflfjdlnkohcplmboaeo?hl=en\n    document.addEventListener(\"contextmenu\", function(event) {\n        event.returnValue = true; \n        event.stopPropagation && event.stopPropagation(); \n        event.cancelBubble && event.cancelBubble();\n    }, true);\n\n    // update UI\n    update();\n\n    // give focus to text box\n    $(\"#q\").focus();\n}\n\n/**\n * Hides info window.\n */\nfunction hideInfo()\n{\n    info.close();\n}\n\n/**\n * Removes markers from map.\n */\nfunction removeMarkers()\n{\n    // TODO\n    _.each(markers, function(marker){\n        marker.setMap(null);\n    });\n}\n\n/**\n * Searches database for typeahead's suggestions.\n */\nfunction search(query, cb)\n{\n    // get places matching query (asynchronously)\n    var parameters = {\n        geo: query\n    };\n    $.getJSON(\"search.php\", parameters)\n    .done(function(data, textStatus, jqXHR) {\n\n        // call typeahead's callback with search results (i.e., places)\n        cb(data);\n    })\n    .fail(function(jqXHR, textStatus, errorThrown) {\n\n        // log error to browser's console\n        console.log(errorThrown.toString());\n    });\n}\n\n/**\n * Shows info window at marker with content.\n */\nfunction showInfo(marker, content)\n{\n    // start div\n    var div = \"<div id='info'>\";\n    if (typeof(content) === \"undefined\")\n    {\n        // http://www.ajaxload.info/\n        div += \"<img alt='loading' src='img/ajax-loader.gif'/>\";\n    }\n    else\n    {\n        div += content;\n    }\n\n    // end div\n    div += \"</div>\";\n\n    // set info window's content\n    info.setContent(div);\n\n    // open info window (if not already open)\n    info.open(map, marker);\n}\n\n/**\n * Updates UI's markers.\n */\nfunction update() \n{\n    // get map's bounds\n    var bounds = map.getBounds();\n    var ne = bounds.getNorthEast();\n    var sw = bounds.getSouthWest();\n\n    // get places within bounds (asynchronously)\n    var parameters = {\n        ne: ne.lat() + \",\" + ne.lng(),\n        q: $(\"#q\").val(),\n        sw: sw.lat() + \",\" + sw.lng()\n    };\n    $.getJSON(\"update.php\", parameters)\n    .done(function(data, textStatus, jqXHR) {\n\n        // remove old markers from map\n        removeMarkers();\n\n        // add new markers to map\n        for (var i = 0; i < data.length; i++)\n        {\n            addMarker(data[i]);\n        }\n     })\n     .fail(function(jqXHR, textStatus, errorThrown) {\n\n         // log error to browser's console\n         console.log(errorThrown.toString());\n     });\n}","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":312,"column":1},"action":"insert","lines":["/* global google */","/* global _ */","/**"," * scripts.js"," *"," * Computer Science 50"," * Problem Set 8"," *"," * Global JavaScript."," */","","// Google Map","var map;","","// markers for map","var markers = [];","","// info window","var info = new google.maps.InfoWindow();","","var myposition = 0;","","// execute when the DOM is fully loaded","$(function() {","","    // styles for map","    // https://developers.google.com/maps/documentation/javascript/styling","    var styles = [","","        // hide Google's labels","        {","            featureType: \"all\",","            elementType: \"labels\",","            stylers: [","                {visibility: \"off\"}","            ]","        },","","        // hide roads","        {","            featureType: \"road\",","            elementType: \"geometry\",","            stylers: [","                {visibility: \"off\"}","            ]","        }","","    ];","","    // options for map","    // https://developers.google.com/maps/documentation/javascript/reference#MapOptions","    var options = {","        center: {lat: 37.4236, lng: -122.1619}, // Stanford, California","        disableDefaultUI: true,","        mapTypeId: google.maps.MapTypeId.ROADMAP,","        maxZoom: 14,","        panControl: true,","        styles: styles,","        zoom: 13,","        zoomControl: true","    };","","    // get DOM node in which map will be instantiated","    var canvas = $(\"#map-canvas\").get(0);","","    // instantiate map","    map = new google.maps.Map(canvas, options);","","    // configure UI once Google Map is idle (i.e., loaded)","    google.maps.event.addListenerOnce(map, \"idle\", configure);","","});","","","function go_to_me()","{","    if (navigator.geolocation)","    {","        navigator.geolocation.getCurrentPosition(function(position)","        {","            var mycurrentLat = position.coords.latitude;","            var mycurrentLong = position.coords.longitude;","            myposition = new google.maps.LatLng(mycurrentLat, mycurrentLong);","            map.setCenter(myposition);","        });","    }","}","","","/**"," * Adds marker for place to map."," */","function addMarker(place)","{","    // TODO","    var lat = place[\"latitude\"];","    var lon = place[\"longitude\"];","    var markerLatLong = new google.maps.LatLng(lat, lon);","    var label = place[\"place_name\"] + \", \" + place[\"admin_name1\"];","    var icon = \"img/icon.png\";","","    var listItems = [];","","    marker = new MarkerWithLabel({","        position: markerLatLong,","        icon: icon,","        map: map,","        draggable: false,","        labelContent: label,","        labelAnchor: new google.maps.Point(-18, 24),","        labelInBackground: false","    });","","    markers.push(marker);","","    var parameter = \"geo=\"+ place[\"postal_code\"];","","    // Create an info window","    marker.info = new google.maps.InfoWindow({","        // Set up the ajax loader gif","        content: \"<div id='articles'><img id='loader' src='img/ajax-loader.gif' /></div>\"","    });","","    // Add a click listener that will load the articles using ajax.","    google.maps.event.addListener(marker, \"click\", function (e){ ","        ","        marker.info.open(map, this);","        // Technique adapted from Baer at this link: http://stackoverflow.com/questions/9760328/clearest-way-to-build-html-elements-in-jquery","        var html = [\"<ul>\"];","        // Modify the html and load-in the articles","        $.getJSON(\"articles.php\", parameter).done(function(data){","            $.each(data, function(i, item){","                html.push(\"<li><a href='\"+item.link+\"' target='_blank'>\"+item.title+\"</a></li>\");","            });","            html.push(\"</ul>\");","            marker.info.setContent(html.join(\"\\n\"));","        }).fail(function(jqXHR, textStatus, errorThrown){","            console.log(errorThrown.toString());","        });","    });","}","","/**"," * Configures application."," */","function configure()","{","    // update UI after map has been dragged","    google.maps.event.addListener(map, \"dragend\", function() {","        update();","    });","","    // update UI after zoom level changes","    google.maps.event.addListener(map, \"zoom_changed\", function() {","        update();","    });","","    // remove markers whilst dragging","    google.maps.event.addListener(map, \"dragstart\", function() {","        removeMarkers();","    });","","    // configure typeahead","    // https://github.com/twitter/typeahead.js/blob/master/doc/jquery_typeahead.md","    $(\"#q\").typeahead({","        autoselect: true,","        highlight: true,","        minLength: 1","    },","    {","        source: search,","        templates: {","            empty: \"no places found yet\",","            suggestion: _.template(\"<p><%-place_name %>, <%-admin_name1 %> <%-postal_code %></p>\")","        }","    });","","    // re-center map after place is selected from drop-down","    $(\"#q\").on(\"typeahead:selected\", function(eventObject, suggestion, name) {","","        // ensure coordinates are numbers","        var latitude = (_.isNumber(suggestion.latitude)) ? suggestion.latitude : parseFloat(suggestion.latitude);","        var longitude = (_.isNumber(suggestion.longitude)) ? suggestion.longitude : parseFloat(suggestion.longitude);","","        // set map's center","        map.setCenter({lat: latitude, lng: longitude});","","        // update UI","        update();","    });","","    // hide info window when text box has focus","    $(\"#q\").focus(function(eventData) {","        hideInfo();","    });","","    // re-enable ctrl- and right-clicking (and thus Inspect Element) on Google Map","    // https://chrome.google.com/webstore/detail/allow-right-click/hompjdfbfmmmgflfjdlnkohcplmboaeo?hl=en","    document.addEventListener(\"contextmenu\", function(event) {","        event.returnValue = true; ","        event.stopPropagation && event.stopPropagation(); ","        event.cancelBubble && event.cancelBubble();","    }, true);","","    // update UI","    update();","","    // give focus to text box","    $(\"#q\").focus();","}","","/**"," * Hides info window."," */","function hideInfo()","{","    info.close();","}","","/**"," * Removes markers from map."," */","function removeMarkers()","{","    // TODO","    _.each(markers, function(marker){","        marker.setMap(null);","    });","}","","/**"," * Searches database for typeahead's suggestions."," */","function search(query, cb)","{","    // get places matching query (asynchronously)","    var parameters = {","        geo: query","    };","    $.getJSON(\"search.php\", parameters)","    .done(function(data, textStatus, jqXHR) {","","        // call typeahead's callback with search results (i.e., places)","        cb(data);","    })","    .fail(function(jqXHR, textStatus, errorThrown) {","","        // log error to browser's console","        console.log(errorThrown.toString());","    });","}","","/**"," * Shows info window at marker with content."," */","function showInfo(marker, content)","{","    // start div","    var div = \"<div id='info'>\";","    if (typeof(content) === \"undefined\")","    {","        // http://www.ajaxload.info/","        div += \"<img alt='loading' src='img/ajax-loader.gif'/>\";","    }","    else","    {","        div += content;","    }","","    // end div","    div += \"</div>\";","","    // set info window's content","    info.setContent(div);","","    // open info window (if not already open)","    info.open(map, marker);","}","","/**"," * Updates UI's markers."," */","function update() ","{","    // get map's bounds","    var bounds = map.getBounds();","    var ne = bounds.getNorthEast();","    var sw = bounds.getSouthWest();","","    // get places within bounds (asynchronously)","    var parameters = {","        ne: ne.lat() + \",\" + ne.lng(),","        q: $(\"#q\").val(),","        sw: sw.lat() + \",\" + sw.lng()","    };","    $.getJSON(\"update.php\", parameters)","    .done(function(data, textStatus, jqXHR) {","","        // remove old markers from map","        removeMarkers();","","        // add new markers to map","        for (var i = 0; i < data.length; i++)","        {","            addMarker(data[i]);","        }","     })","     .fail(function(jqXHR, textStatus, errorThrown) {","","         // log error to browser's console","         console.log(errorThrown.toString());","     });","}"],"id":1}]]},"ace":{"folds":[],"scrolltop":4413,"scrollleft":0,"selection":{"start":{"row":312,"column":1},"end":{"row":312,"column":1},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":274,"state":"start","mode":"ace/mode/text"}},"timestamp":1467965731483}